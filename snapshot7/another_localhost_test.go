package snapshot7_test

import (
	"testing"

	"github.com/teeworlds-go/protocol/internal/testutils/require"
	"github.com/teeworlds-go/protocol/messages7"
	"github.com/teeworlds-go/protocol/network7"
	"github.com/teeworlds-go/protocol/object7"
	"github.com/teeworlds-go/protocol/protocol7"
)

// localhost first connection
// only one player
// map bridge_pickups

func TestFirstSnapInGameInfoClientInfoSnap(t *testing.T) {
	t.Parallel()
	// snapshot captured with tcpdump
	// generated by a vanilla teeworlds 0.7.5 server
	// used https://github.com/ChillerDragon/teeworlds/tree/hacking-on-protocol client to connect
	// 0.7 vanilla based client with debug prints
	//
	// libtw2 dissector details
	// Teeworlds 0.7 Protocol packet
	//     Flags: compressed (..01 00..)
	//     Acknowledged sequence number: 4 (.... ..00 0000 0100)
	//     Number of chunks: 3
	//     Token: 505e67f9
	//     Compressed payload (206 bytes)
	// Teeworlds 0.7 Protocol chunk: game.sv_game_info
	//     Header (vital: 9)
	//     Message: game.sv_game_info
	//     Game flags: teams, flags (0x3)
	//     Score limit: 20
	//     Time limit: 0
	//     Match num: 0
	//     Match current: 1
	// Teeworlds 0.7 Protocol chunk: game.sv_client_info
	//     Header (vital: 10)
	//     Message: game.sv_client_info
	//     Client id: 0
	//     Local: true
	//     Team: red
	//     Name: "ChillerDragon"
	//     Clan: ""
	//     Country: -1
	//     Skin part names: "greensward"
	//     Skin part names: "duodonny"
	//     Skin part names: ""
	//     Skin part names: "standard"
	//     Skin part names: "standard"
	//     Skin part names: "standard"
	//     Use custom colors: true
	//     Use custom colors: true
	//     Use custom colors: false
	//     Use custom colors: false
	//     Use custom colors: false
	//     Use custom colors: false
	//     Skin part colors: 5635840
	//     Skin part colors: -11141356
	//     Skin part colors: 65408
	//     Skin part colors: 65408
	//     Skin part colors: 65408
	//     Skin part colors: 65408
	//     Silent: false
	// Teeworlds 0.7 Protocol chunk: sys.snap_single
	//     Header (non-vital)
	//     Message: sys.snap_single
	//     Tick: 740
	//     Delta tick: 741
	//     Crc: 15510
	//     Data (103 bytes)
	dump := []byte{
		0x10, 0x04, 0x03, 0x50, 0x5e, 0x67, 0xf9, 0x4a,
		0x36, 0x4c, 0xed, 0x16, 0xf0, 0x23, 0x6f, 0x97, 0xf4, 0x30,
		0x62, 0xc6, 0x5d, 0xab, 0x6b, 0x71, 0x25, 0x5c, 0x09, 0x4e, 0x80, 0x93, 0x66, 0x70, 0xe2, 0x28,
		0x3a, 0x67, 0x8b, 0x5c, 0xfb, 0x4a, 0x74, 0x0e, 0x4e, 0x9c, 0xc0, 0x09, 0xae, 0x9d, 0x4e, 0x15,
		0xb7, 0x1c, 0x05, 0x27, 0x4e, 0xcc, 0x89, 0xb6, 0xd4, 0x16, 0x71, 0xa2, 0x2d, 0x72, 0xed, 0xae,
		0x1d, 0xca, 0xa7, 0x53, 0x28, 0xe1, 0x28, 0xd7, 0xce, 0x89, 0x1c, 0x05, 0x27, 0x4e, 0x4c, 0xa7,
		0x50, 0xc2, 0x51, 0xae, 0x9d, 0x13, 0x39, 0x0a, 0x4e, 0x9c, 0x98, 0x4e, 0xa1, 0x84, 0xa3, 0x5c,
		0x3b, 0x27, 0x72, 0x14, 0x9c, 0x38, 0x31, 0xe2, 0x03, 0xd3, 0xea, 0x3b, 0x3b, 0x55, 0xfb, 0x4d,
		0xea, 0xf5, 0x40, 0x83, 0xdd, 0x80, 0x06, 0xbb, 0x01, 0x0d, 0x76, 0x03, 0x1a, 0xec, 0x16, 0x7d,
		0x32, 0x65, 0xdb, 0x9f, 0x81, 0xbf, 0x0c, 0xcd, 0x47, 0x86, 0xb0, 0xbc, 0xd7, 0x24, 0x0d, 0x93,
		0x5e, 0x0f, 0x4d, 0xf2, 0x31, 0xe9, 0x09, 0x4f, 0x98, 0x84, 0x98, 0xf4, 0x2c, 0x3c, 0x0b, 0x93,
		0x3c, 0x4d, 0x7a, 0x9e, 0xe7, 0x06, 0xeb, 0x9b, 0x49, 0x0f, 0xed, 0x61, 0xb9, 0xb0, 0x5e, 0x3b,
		0x9a, 0x84, 0x87, 0xf5, 0xd0, 0x26, 0x54, 0x37, 0xec, 0x76, 0x92, 0x37, 0xef, 0xf5, 0x7d, 0xec,
		0x6f, 0x52, 0x4e, 0xc5, 0x0b, 0xc4, 0x95, 0x36, 0x29, 0x87, 0xf5, 0xd6, 0xd7, 0xe3, 0xfd, 0x93,
		0x15, 0x37, 0x00,
	}

	packet := protocol7.Packet{}
	err := packet.Unpack(dump)
	require.NoError(t, err)

	// TODO: not working yet
	// conn := protocol7.Session{}
	// conn.Ack = packet.Header.Ack
	// repack := packet.Pack(&conn)
	// require.Equal(t, dump, repack)

	// content
	require.Equal(t, 3, len(packet.Messages))

	// --------------------------
	// game info
	// --------------------------

	// --------------------------
	// client info
	// --------------------------

	// --------------------------
	// snapshot
	// --------------------------

	require.Equal(t, network7.MsgSysSnapSingle, packet.Messages[2].MsgId())
	msg, ok := packet.Messages[2].(*messages7.SnapSingle)
	require.Equal(t, true, ok)

	// verified with hacking on protocol print
	require.Equal(t, 12, msg.Snapshot.NumItemDeltas)
	require.Equal(t, 0, msg.Snapshot.NumRemovedItems)
	require.Equal(t, 12, len(msg.Snapshot.Items))

	// this is verified by libtw2 dissector
	// and hacking on protocol
	require.Equal(t, 15510, msg.Snapshot.Crc)

	// verified with hacking on protocol
	item := msg.Snapshot.Items[0]
	require.Equal(t, network7.ObjPickup, item.TypeId())
	pickup, ok := item.(*object7.Pickup)
	require.Equal(t, true, ok)
	require.Equal(t, 0, pickup.Id())
	require.Equal(t, 1424, pickup.X)
	require.Equal(t, 272, pickup.Y)
	require.Equal(t, network7.PickupHealth, pickup.Type)

	item = msg.Snapshot.Items[1]
	require.Equal(t, network7.ObjPickup, item.TypeId())
	pickup, ok = item.(*object7.Pickup)
	require.Equal(t, true, ok)
	require.Equal(t, 1, pickup.Id())
	require.Equal(t, 1488, pickup.X)
	require.Equal(t, 272, pickup.Y)
	require.Equal(t, network7.PickupGrenade, pickup.Type)
	require.Equal(t, 2, int(pickup.Type))

	item = msg.Snapshot.Items[2]
	require.Equal(t, network7.ObjPickup, item.TypeId())
	pickup, ok = item.(*object7.Pickup)
	require.Equal(t, true, ok)
	require.Equal(t, 2, pickup.Id())
	require.Equal(t, 1552, pickup.X)
	require.Equal(t, 272, pickup.Y)
	require.Equal(t, network7.PickupShotgun, pickup.Type)
	require.Equal(t, 3, int(pickup.Type))

	item = msg.Snapshot.Items[3]
	require.Equal(t, network7.ObjPickup, item.TypeId())
	pickup, ok = item.(*object7.Pickup)
	require.Equal(t, true, ok)
	require.Equal(t, 3, pickup.Id())
	require.Equal(t, 1616, pickup.X)
	require.Equal(t, 272, pickup.Y)
	require.Equal(t, network7.PickupLaser, pickup.Type)
	require.Equal(t, 4, int(pickup.Type))

	// there are more snap items but so far everything is correct
	// including the crc
}
